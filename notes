-> 1st Step:
	↨ create vector of servers.
	↨ each vector element is a Server class.

-> 2nd Step:
	↨ create server sockets.
	↨ create vector of clients.
	↨ each vector element is a Client struct.
	↨ setup multiplexing.

-> 3rd Step:
	↨ wait for request.
	↨ parse header.
	↨ check host header to know which server should handle request. (if no server_name has matched, choose first server).
	↨ check content_length.
	↨ check valid location.
	↨ check method permission.
	↨ check location redirection.
	↨ check CGI.
	↨ check upload. (if method is POST).
	↨ send response.
	


#############################################

GET / HTTP/1.1
[] -> []
[Accept] -> [text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8]
[Accept-Encoding] -> [gzip, deflate, br]
[Accept-Language] -> [en-GB,en-US;q=0.9,en;q=0.8]
[Connection] -> [keep-alive]
[Host] -> [localhost:4241]
[Sec-Fetch-Dest] -> [document]
[Sec-Fetch-Mode] -> [navigate]
[Sec-Fetch-Site] -> [none]
[Sec-Fetch-User] -> [?1]
[Sec-GPC] -> [1]
[Upgrade-Insecure-Requests] -> [1]
[User-Agent] -> [Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36]
[sec-ch-ua] -> ["Brave";v="113", "Chromium";v="113", "Not-A.Brand";v="24"]
[sec-ch-ua-mobile] -> [?0]
[sec-ch-ua-platform] -> ["Windows"]